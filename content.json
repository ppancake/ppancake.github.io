{"meta":{"title":"ppancake","subtitle":null,"description":null,"author":"ZWK","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"UNIX学习-环境配置","slug":"unix-4.23","date":"2019-06-03T07:22:51.345Z","updated":"2019-06-03T07:25:28.873Z","comments":true,"path":"2019/06/03/unix-4.23/","link":"","permalink":"http://yoursite.com/2019/06/03/unix-4.23/","excerpt":"","text":"##代码环境配置下载源码后，发现无法再Ubantu上直接运行，需要进行一些环境配置，查看readme后，也遇到了一些坑。 ./configure # try to figure out all implementation differences cd lib # build the basic library that all programs need make # use &quot;gmake&quot; everywhere on BSD/OS systems cd ../libfree # continue building the basic library make cd ../libroute # only if your system supports 4.4BSD style routing sockets make # only if your system supports 4.4BSD style routing sockets cd ../libxti # only if your system supports XTI make # only if your system supports XTI cd ../intro # build and test a basic client program make daytimetcpcli ./daytimetcpcli 127.0.0.1 第一步检查和生成作用 第二步 链接库 第三步 出现问题 修改size_t 变为socklen_t类型 第四步，本来会提示发现缺少net/if_dl.h头文件,下载if_dl.h的源文件，放到/usr/include/net/下。完成后make发现还是有错误： get_rtaddrs.c:21:18: note: each undeclared identifier is reported only once for each function it appears in get_rtaddrs.c:13:21: error: ‘struct sockaddr’ has no member named ‘sa_len’ ((caddr_t) ap + (ap-&gt;sa_len ? ROUNDUP(ap-&gt;sa_len, sizeof (u_l ^ get_rtaddrs.c:24:4: note: in expansion of macro ‘NEXT_SA’ NEXT_SA(sa); ^ 最后发现README里面说BSD的系统才用编译这个。struct sockaddr 结构体中没有sa_len变量，不单单是这个问题，主因是only if your system supports 4.4BSD style routing sockets。自己的系统是基于Ubuntu系统，所以不用编译这个,直接跳到第五步。 第五步，打开srv和cli程序，进行通信。注意权限sudo ./运行","categories":[],"tags":[]},{"title":"Markdown基本语法","slug":"markdown","date":"2019-06-03T07:22:51.341Z","updated":"2019-06-03T07:25:21.557Z","comments":true,"path":"2019/06/03/markdown/","link":"","permalink":"http://yoursite.com/2019/06/03/markdown/","excerpt":"","text":"##1、标题1）使用= 和 -，标记一级和二级标题。一级标题=二级标题-2）使用 #,可以表示 1-6级 标题 第一级标题第二级标题##2、段落段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用两个以上空格加上回车（引用中换行省略回车） ##3、区块引用在段落的每行或者只在第一行使用符号 &gt;，还可使用多个嵌套引用 区块引用 嵌套引用 三嵌套引用 四嵌套引用 ##4、代码块代码区块的建立是在每行加上4个空格或者一个制表符tab（如同写代码一样）。 需要和普通段落之间存在空行！ fun() { println(&quot;Hello World!&quot;) } ##5、强调在强调内容两侧分别加上 *或者 - 斜体 ，_斜体_ 加粗，粗体 ##6、列表无序列表使用*或+或-标识 有序列表使用数字加.标识，例如：1. 黄瓜 玉米##7、分割线分割线最常使用就是三个或以上的 * ，还可以使用 - 和 _。 ##8、链接与链接链接可以由两种形式生成，行内式 和 参考式。 行内式：[]&lt;&gt; GitHub 自动生成连接 http://www.github.com/ 参考式：[][1] [1]:http [GitHub][1][1]:http://github.com自动生成连接 http://www.github.com/ 图片是在链接前面加上一个！号 ##9、反转义\\相当于反转义作用。使符号成为普通符号。后面的都为原来意思。 ##10、标记两个`之间框柱的内容可以变成一个灰色的标记区域。 标记`标记` ##11、表格 一个普通标题 一个普通标题 一个普通标题 短文本 中等文本 稍微长一点的文本 稍微长一点的文本 短文本 中等文本","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-04-17T02:14:29.626Z","updated":"2018-04-17T02:14:29.626Z","comments":true,"path":"2018/04/17/hello-world/","link":"","permalink":"http://yoursite.com/2018/04/17/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}